const fs = require('fs').promises;
const path = require('path');
const { authenticate } = require('@google-cloud/local-auth');
const { google } = require('googleapis');

// Load environment variables
const SCOPES = process.env.SCOPES.split(',');
const CALENDAR_ID = process.env.CALENDAR_ID;
const secretsDirectory = process.env.secretsDirectory;

const TOKEN_PATH = path.join(secretsDirectory, 'token.json');
const CREDENTIALS_PATH = path.join(secretsDirectory, 'credentials.json');

async function loadSavedCredentialsIfExist() {
    try {
        const content = await fs.readFile(TOKEN_PATH);
        const credentials = JSON.parse(content);
        return google.auth.fromJSON(credentials);
    } catch (err) {
        return null;
    }
}

async function saveCredentials(client) {
    const content = await fs.readFile(CREDENTIALS_PATH);
    const keys = JSON.parse(content);
    const key = keys.installed || keys.web;
    const payload = JSON.stringify({
        type: 'authorized_user',
        client_id: key.client_id,
        client_secret: key.client_secret,
        refresh_token: client.credentials.refresh_token,
    });
    await fs.writeFile(TOKEN_PATH, payload);
}

async function authorize() {
    let client = await loadSavedCredentialsIfExist();
    if (client) {
        return client;
    }
    client = await authenticate({
        scopes: SCOPES,
        keyfilePath: CREDENTIALS_PATH,
    });

    if (client.credentials) {
        await saveCredentials(client);
    }
    return client;
}

async function listEvents(auth) {
    const calendar = google.calendar({ version: 'v3', auth });
    const res = await calendar.events.list({
        calendarId: CALENDAR_ID,
        maxResults: 10
    });
    const events = res.data.items;
    if (!events || events.length === 0) {
        console.log('No upcoming events found.');
        return;
    }
    console.log('Upcoming 10  events:');
    events.map((event, i) => {
        const start = event.start.dateTime || event.start.date;
        console.log(`${start} - ${event.summary}`);
    });
}

async function createEvent(auth, booking) {
    const calendar = google.calendar({ version: 'v3', auth });

    const event = {
        summary: `${booking.clientName} - ${booking.phoneNumber}`,
        description: booking.details,
        start: {
            dateTime: booking.bookingDate,
            timeZone: 'Asia/Kolkata',
        },
        end: {
            dateTime: booking.bookingEndDate,
            timeZone: 'Asia/Kolkata',
        },
    };

    try {
        const response = await calendar.events.insert({
            auth: auth,
            calendarId: CALENDAR_ID,
            resource: event,
        });
        console.log('Event created: %s', response.data.htmlLink);
        return response.data.id;

    } catch (err) {
        console.log('There was an error contacting the Calendar service: ' + err);
        return null;
    }
}

async function deleteEvent(auth, eventId) {
    const calendar = google.calendar({ version: 'v3', auth });

    try {
        await calendar.events.delete({
            calendarId: CALENDAR_ID,
            eventId: eventId,
        });
        console.log('Event deleted successfully.');
    } catch (error) {
        console.error('Error deleting event:', error);
    }
}

module.exports = {
    authorize,
    listEvents,
    createEvent,
    deleteEvent
};